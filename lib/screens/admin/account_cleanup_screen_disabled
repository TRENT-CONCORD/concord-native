import 'package:flutter/material.dart';
import '../../services/profile_service.dart';
import '../../services/auth_service.dart';

// This is a simple admin screen for managing account cleanup
// In a real app, you'd want to add proper admin authentication and authorization
class AccountCleanupScreen extends StatefulWidget {
  const AccountCleanupScreen({Key? key}) : super(key: key);

  @override
  State<AccountCleanupScreen> createState() => _AccountCleanupScreenState();
}

class _AccountCleanupScreenState extends State<AccountCleanupScreen> {
  final ProfileService _profileService = ProfileService();
  final AuthService _authService = AuthService();
  bool _isLoading = false;
  bool _isLoadingStats = true;
  String _resultMessage = '';
  List<Map<String, dynamic>> _scheduledDeletions = [];
  int _expiredAccounts = 0;

  @override
  void initState() {
    super.initState();
    _loadDeletionStats();
  }

  Future<void> _loadDeletionStats() async {
    if (!mounted) return;

    setState(() {
      _isLoadingStats = true;
    });

    try {
      // Load accounts scheduled for deletion
      final expiredProfiles =
          await _profileService.getProfilesScheduledForDeletion();
      final expiredCount = expiredProfiles.length;

      // For a complete admin tool, you'd also want to get pending deletions
      // (those within the 90-day window)

      if (mounted) {
        setState(() {
          _expiredAccounts = expiredCount;
          _scheduledDeletions = expiredProfiles;
          _isLoadingStats = false;
        });
      }
    } catch (e) {
      if (mounted) {
        setState(() {
          _resultMessage = 'Error loading deletion stats: $e';
          _isLoadingStats = false;
        });
      }
    }
  }

  Future<void> _runManualCleanup() async {
    if (_isLoading) return;

    // Ask for confirmation
    final shouldProceed = await showDialog<bool>(
          context: context,
          builder: (context) => AlertDialog(
            title: const Text('Confirm Account Cleanup'),
            content: Text(
                'This will permanently delete $_expiredAccounts accounts that have exceeded the 90-day grace period. This action cannot be undone.'),
            actions: [
              TextButton(
                onPressed: () => Navigator.of(context).pop(false),
                child: const Text('Cancel'),
              ),
              ElevatedButton(
                onPressed: () => Navigator.of(context).pop(true),
                style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
                child: const Text('Proceed with Deletion'),
              ),
            ],
          ),
        ) ??
        false;

    if (!shouldProceed) return;

    setState(() {
      _isLoading = true;
      _resultMessage = 'Running account cleanup...';
    });

    try {
      // Execute the manual cleanup
      final result = await _profileService.manuallyCleanupExpiredAccounts();

      if (mounted) {
        setState(() {
          _isLoading = false;
          if (result['status'] == 'success') {
            _resultMessage =
                'Cleanup completed. Processed: ${result['totalProcessed']}, Successful: ${result['successCount']}, Errors: ${result['errorCount']}';
          } else {
            _resultMessage = 'Error: ${result['message']}';
          }
        });

        // Refresh stats after cleanup
        _loadDeletionStats();
      }
    } catch (e) {
      if (mounted) {
        setState(() {
          _isLoading = false;
          _resultMessage = 'Error running cleanup: $e';
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    // Check if user is authorized (in a real app, you'd use a more robust method)
    final currentUser = _authService.currentUser;
    if (currentUser == null) {
      return Scaffold(
        appBar: AppBar(
          title: const Text('Admin Tools'),
        ),
        body: const Center(
          child: Text('You must be logged in to access admin tools'),
        ),
      );
    }

    return Scaffold(
      appBar: AppBar(
        title: const Text('Account Cleanup Admin'),
        backgroundColor: const Color(0xFF6A1B9A),
        foregroundColor: Colors.white,
      ),
      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [
              Color(0xFF6A1B9A), // Deep Purple
              Color(0xFF8E24AA), // Purple
              Color(0xFFAB47BC), // Light Purple
            ],
            stops: [0.0, 0.5, 1.0],
          ),
        ),
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: _isLoadingStats
              ? const Center(
                  child: CircularProgressIndicator(color: Colors.white))
              : Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // Dashboard card
                    Card(
                      color: Colors.white.withOpacity(0.1),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                      child: Padding(
                        padding: const EdgeInsets.all(16.0),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            const Text(
                              'Account Deletion Status',
                              style: TextStyle(
                                fontSize: 18,
                                fontWeight: FontWeight.bold,
                                color: Colors.white,
                              ),
                            ),
                            const SizedBox(height: 16),
                            Row(
                              children: [
                                _StatCard(
                                  title: 'Accounts Expired',
                                  value: _expiredAccounts.toString(),
                                  icon: Icons.delete_forever,
                                  color: Colors.redAccent,
                                ),
                                const SizedBox(width: 16),
                                _StatCard(
                                  title: 'Scheduled Actions',
                                  value: 'Daily',
                                  icon: Icons.schedule,
                                  color: Colors.blueAccent,
                                ),
                              ],
                            ),
                            const SizedBox(height: 16),
                            if (_resultMessage.isNotEmpty)
                              Container(
                                width: double.infinity,
                                padding: const EdgeInsets.all(12),
                                decoration: BoxDecoration(
                                  color: Colors.black.withOpacity(0.2),
                                  borderRadius: BorderRadius.circular(8),
                                ),
                                child: Text(
                                  _resultMessage,
                                  style: TextStyle(
                                    color: _resultMessage.contains('Error')
                                        ? Colors.red.shade300
                                        : Colors.green.shade300,
                                  ),
                                ),
                              ),
                            const SizedBox(height: 16),
                            Row(
                              mainAxisAlignment: MainAxisAlignment.end,
                              children: [
                                ElevatedButton.icon(
                                  onPressed: _loadDeletionStats,
                                  icon: const Icon(Icons.refresh),
                                  label: const Text('Refresh'),
                                  style: ElevatedButton.styleFrom(
                                    foregroundColor: Colors.white,
                                    backgroundColor:
                                        Colors.purpleAccent.withOpacity(0.6),
                                  ),
                                ),
                                const SizedBox(width: 12),
                                ElevatedButton.icon(
                                  onPressed: _expiredAccounts > 0 && !_isLoading
                                      ? _runManualCleanup
                                      : null,
                                  icon: const Icon(Icons.cleaning_services),
                                  label: _isLoading
                                      ? const SizedBox(
                                          width: 16,
                                          height: 16,
                                          child: CircularProgressIndicator(
                                            color: Colors.white,
                                            strokeWidth: 2,
                                          ),
                                        )
                                      : const Text('Run Manual Cleanup'),
                                  style: ElevatedButton.styleFrom(
                                    foregroundColor: Colors.white,
                                    backgroundColor:
                                        Colors.red.withOpacity(0.7),
                                  ),
                                ),
                              ],
                            ),
                          ],
                        ),
                      ),
                    ),
                    const SizedBox(height: 16),

                    // List of accounts to be deleted
                    if (_scheduledDeletions.isNotEmpty) ...[
                      const Text(
                        'Accounts Ready for Permanent Deletion',
                        style: TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                          color: Colors.white,
                        ),
                      ),
                      const SizedBox(height: 8),
                      Expanded(
                        child: Card(
                          color: Colors.white.withOpacity(0.1),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                          child: ListView.builder(
                            itemCount: _scheduledDeletions.length,
                            itemBuilder: (context, index) {
                              final account = _scheduledDeletions[index];
                              final String email =
                                  account['email'] as String? ??
                                      'Unknown email';
                              final String uid = account['uid'] as String;
                              final int daysOverdue =
                                  account['daysOverdue'] as int? ?? 0;
                              final String scheduledAt =
                                  account['deletionScheduledAt'] as String? ??
                                      'Unknown date';

                              return ListTile(
                                title: Text(
                                  email,
                                  style: const TextStyle(color: Colors.white),
                                ),
                                subtitle: Text(
                                  'UID: $uid\nScheduled: ${_formatDate(scheduledAt)}',
                                  style: TextStyle(
                                      color: Colors.white.withOpacity(0.7)),
                                ),
                                trailing: Container(
                                  padding: const EdgeInsets.symmetric(
                                    horizontal: 8,
                                    vertical: 4,
                                  ),
                                  decoration: BoxDecoration(
                                    color: Colors.red.withOpacity(0.6),
                                    borderRadius: BorderRadius.circular(12),
                                  ),
                                  child: Text(
                                    '$daysOverdue days overdue',
                                    style: const TextStyle(color: Colors.white),
                                  ),
                                ),
                              );
                            },
                          ),
                        ),
                      ),
                    ] else if (!_isLoadingStats && _expiredAccounts == 0) ...[
                      const SizedBox(height: 32),
                      Center(
                        child: Column(
                          children: [
                            Icon(
                              Icons.check_circle,
                              size: 72,
                              color: Colors.green.withOpacity(0.7),
                            ),
                            const SizedBox(height: 16),
                            const Text(
                              'No accounts are pending permanent deletion',
                              style: TextStyle(
                                color: Colors.white,
                                fontSize: 16,
                              ),
                            ),
                          ],
                        ),
                      ),
                    ],
                  ],
                ),
        ),
      ),
    );
  }

  String _formatDate(String isoDateString) {
    try {
      final date = DateTime.parse(isoDateString);
      return '${date.year}-${date.month.toString().padLeft(2, '0')}-${date.day.toString().padLeft(2, '0')}';
    } catch (e) {
      return 'Invalid date';
    }
  }
}

class _StatCard extends StatelessWidget {
  final String title;
  final String value;
  final IconData icon;
  final Color color;

  const _StatCard({
    required this.title,
    required this.value,
    required this.icon,
    required this.color,
  });

  @override
  Widget build(BuildContext context) {
    return Expanded(
      child: Container(
        padding: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          color: Colors.black.withOpacity(0.2),
          borderRadius: BorderRadius.circular(12),
          boxShadow: [
            BoxShadow(
              color: color.withOpacity(0.3),
              blurRadius: 5,
              offset: const Offset(0, 2),
            ),
          ],
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(
                  icon,
                  color: color,
                  size: 28,
                ),
                const SizedBox(width: 8),
                Text(
                  title,
                  style: TextStyle(
                    color: Colors.white.withOpacity(0.7),
                    fontSize: 14,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 8),
            Text(
              value,
              style: const TextStyle(
                color: Colors.white,
                fontSize: 24,
                fontWeight: FontWeight.bold,
              ),
            ),
          ],
        ),
      ),
    );
  }
}
